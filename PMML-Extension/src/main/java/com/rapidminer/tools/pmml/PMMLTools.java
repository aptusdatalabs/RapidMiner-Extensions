/**
 * RapidMiner PMML Extension
 *
 * Copyright (C) 2001-2015 by RapidMiner and the contributors
 *
 * Complete list of developers available at our web site:
 *
 *      http://rapidminer.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 */
package com.rapidminer.tools.pmml;

import java.text.DateFormat;
import java.util.Date;
import java.util.Iterator;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.rapidminer.RapidMiner;
import com.rapidminer.example.AttributeRole;
import com.rapidminer.example.ExampleSet;
import com.rapidminer.operator.io.pmml.PMMLTranslation;
import com.rapidminer.operator.io.pmml.PMMLVersion;

/**
 * This class offers several reusable methods for creating PMML files.
 *  
 * @author Sebastian Land
 *
 */
public class PMMLTools {
	   /**
     * This method writes the data dictionary from all fields in the trainings signature.
     */
    public static void createDataDictionary(Document pmml, Element father, ExampleSet trainingsSignature, PMMLVersion version) {
        Element dictionary = createElement(pmml, father, "DataDictionary");
        dictionary.setAttribute("numberOfFields", trainingsSignature.getAttributes().allSize() + "");

        Iterator<AttributeRole> roleIterator = trainingsSignature.getAttributes().allAttributeRoles();
        while (roleIterator.hasNext()) {
            AttributeRole role = roleIterator.next();
            com.rapidminer.example.Attribute attribute = role.getAttribute();
            Element dataFieldElement = createElement(pmml, dictionary, "DataField");
            dataFieldElement.setAttribute("name", attribute.getName());
            dataFieldElement.setAttribute("optype", PMMLTranslation.getOpType(attribute));
            dataFieldElement.setAttribute("dataType", PMMLTranslation.getValueType(attribute));

            if (attribute.isNominal()) {
                for (String value: attribute.getMapping().getValues()) {
                    Element valueElement = createElement(pmml, dataFieldElement, "Value");
                    valueElement.setAttribute("value", value);
                }
                Element valueElement = createElement(pmml, dataFieldElement, "Value");
                valueElement.setAttribute("value", "MISSING_VALUE");
            }
        }
    }


    /**
     * This method writes the header of all pmml files. This is independent from given models.
     * The root element of the PMML model is returned.
     */
    public static Element createHeader(Document pmml, PMMLVersion version) {
        Element root = pmml.createElement("PMML");
        root.setAttribute("version", version.getVersion());
        root.setAttribute("xmlns", "http://www.dmg.org/PMML-4_3");
        root.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        pmml.appendChild(root);

        Element header = pmml.createElement("Header");
        header.setAttribute("copyright", "Rapid-I GmbH");
        header.setAttribute("description", "generated by RapidMiner " + RapidMiner.getShortVersion());
        root.appendChild(header);

        // application element
        Element application = createElement(pmml, header, "Application");
        application.setAttribute("name", "RapidMiner");
        application.setAttribute("version", RapidMiner.getLongVersion());

        // annotation element
        //Element annotation = createElement(pmml, header, "Annotation");
        //Element extension = createElement(pmml, annotation, "Extension");
        // TODO: We might add here arbitrary content like description, process, source in repository etc...

        // timestamp element
        Element timestamp = createElement(pmml, header, "Timestamp");
        timestamp.setTextContent(DateFormat.getDateTimeInstance().format(new Date()));
        return root;
    }

    private static Element createElement(Document document, Element father, String name) {
        Element element = document.createElement(name);
        father.appendChild(element);
        return element;
    }
}
